<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1292.v27d8cc3e2602">
    <description>Tests set for API/Auth/Login</description>
    <keepDependencies>false</keepDependencies>
    <properties/>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3659.v582dc37621d8">
        <script>

import groovy.json.JsonSlurper

def ADMIN_EMAIL='admin-1@google.com'
def ADMIN_PASSWORD='Pa$$w0rd'

def sendLoginRequest(String requestBody, Integer expectedResponseCode) {
    def response = httpRequest ignoreSslErrors: true, acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON',
        httpMode: 'POST',
        requestBody: requestBody,
        url: 'https://host.docker.internal:7154/API/Auth/Login',
        validResponseCodes: Integer.toString(expectedResponseCode)
    
    def jsonSlurper = new JsonSlurper()
    return jsonSlurper.parseText(response.content)
}

pipeline {
    agent any

    stages {
        stage('Clean directory') {
            steps {
                cleanWs()
            }
        }

        stage('Test - Login should pass') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "${ADMIN_EMAIL}", "password": "${ADMIN_PASSWORD}"}"""
                        def serviceResponse = sendLoginRequest(requestBody, 200);
                        assert serviceResponse.success == true;
                        assert serviceResponse.message == "Token created.";
                    }
                }
            }
        }

        stage('Test - Login with wrong email should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "wrong_email_example@google.com", "password": "${ADMIN_PASSWORD}"}"""
                        def serviceResponse = sendLoginRequest(requestBody, 404);
                        assert serviceResponse.success == false;
                        assert serviceResponse.message == "The requested user with email: wrong_email_example@google.com could not be found in the database.";
                    }
                }
            }
        }
        
        stage('Test - Login with wrong password should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "${ADMIN_EMAIL}", "password": "wrong_password_example"}"""
                        def serviceResponse = sendLoginRequest(requestBody, 401);
                        assert serviceResponse.success == false;
                        assert serviceResponse.message == "Wrong password.";
                    }
                }
            }
        }
        
        stage('Test - Login with incorrect email should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "incorrect_email_example", "password": "${ADMIN_PASSWORD}"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Email[0] == "Invalid email format.";
                    }
                }
            }
        }
        
        stage('Test - Login with white characters email should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "admin- 1@google.com", "password": "${ADMIN_PASSWORD}"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Email[0] == "Field must not contain white characters.";
                    }
                }
            }
        }
        
        stage('Test - Login with white characters password should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "${ADMIN_EMAIL}", "password": "password with white characters"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Password[0] == "Field must not contain white characters.";
                    }
                }
            }
        }
        
        stage('Test - Login with empty email should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "", "password": "${ADMIN_PASSWORD}"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Email[0] == "The field Email must be a string with a minimum length of 8 and a maximum length of 64.";
                    }
                }
            }
        }
        
        stage('Test - Login with empty password should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "${ADMIN_EMAIL}", "password": ""}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Password[0] == "The field Password must be a string with a minimum length of 8 and a maximum length of 64.";
                    }
                }
            }
        }
        
        stage('Test - Login with emoji email should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€@google.com", "password": "${ADMIN_PASSWORD}"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Email[0] == "Invalid email format.";
                    }
                }
            }
        }
        
        stage('Test - Login with emoji password should fail') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def requestBody="""{"email": "${ADMIN_EMAIL}", "password": "ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€"}"""
                        def validationErrorResponse = sendLoginRequest(requestBody, 400);
                        assert validationErrorResponse.errors.Password[0] == "Field must not contain emoji.";
                    }
                }
            }
        }
        
    }
}

        </script>
    <sandbox>false</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>